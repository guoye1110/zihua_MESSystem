using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;




using System.Drawing;
using System.Drawing.Printing;
using System.Windows.Forms;
using System.Data;
namespace LabelPrint.Print
{
    public class Report_BangMa : Report
    {
        public String ProductCode;
        public String BatchNo;
        public String MDate;
        public String PlateNo;
        public String VendorName;

        private int Tabx;
        private int Taby;
        protected override void InitialVariableForPrint()
        {
            base.InitialVariableForPrint();
            XUnit = new int[DataTablePrint.Columns.Count];
            //   Tabx = SubTitleRows *YUnit +
        }



        String[] Titles = { "序号", "大卷号/小卷号", "重量(kg)", "接头数", "序号", "大卷号/小卷号", "重量(kg)", "接头数" };
        Font Header1 = new Font("Verdana", 15, FontStyle.Bold);


        override protected int GetTotalPrintPage() { return 1; }

        override protected void PrinterPageSetting()
        {
            PageSetupDialog PageSetup = new PageSetupDialog();
            PageSetup.Document = DataTablePrinter;
            DataTablePrinter.DefaultPageSettings = PageSetup.PageSettings;
            DataTablePrinter.DefaultPageSettings.Landscape = false;//设置打印横向还是纵向
        }
        override protected void DataTablePrinter_PrintPage(object sende, PrintPageEventArgs Ev)
        {
            g = Ev.Graphics;
            PrintReportHeader(Ev);
            PrintReportSubHeaders(Ev);
            PrintTableFirstPart(Ev);

        }


        void PrintReportHeader(PrintPageEventArgs Ev)
        {
            if (PrintingPageNumber == 1)
            {
                StringFormat sf = new StringFormat();
                sf.Alignment = StringAlignment.Center;
                g.DrawString("上海紫华企业有限公司", HeadFont, DrawBrush, new Point(Ev.PageBounds.Width / 2, PTop), sf);
                g.DrawString("磅 码 单", new Font("Verdana", 15, FontStyle.Bold), DrawBrush, new Point(Ev.PageBounds.Width / 2, PTop + HeadFont.Height), sf);
            }
        }


        String TProductCode = "产品代号: ";
        String TBatchNo = "生产批号: ";
        String TMDate = "生产日期: ";
        String TPlateNo = "铲板号: ";
        String TVendorName = "供应商名称: ";
        void BuildTitleString ()
        {
            TProductCode    += ProductCode;
            TBatchNo        += BatchNo;
            TMDate          += MDate;
            TPlateNo        += PlateNo;
            TVendorName     += VendorName;

        }
        //String ProductCode
        void PrintReportSubHeaders(PrintPageEventArgs Ev)
        {
            if (PrintingPageNumber == 1)
            {
                BuildTitleString();
                DrawHString(TProductCode, PLeft + 20, PTop + 2 * YUnit);
                g.DrawString(TBatchNo, TableFont, DrawBrush, new Point(Ev.PageBounds.Width * 1 / 4 + 40, PTop + 2 * YUnit + (YUnit - TableFont.Height) / 2));
                g.DrawString(TMDate, TableFont, DrawBrush, new Point(Ev.PageBounds.Width * 2 / 4 + 20, PTop + 2 * YUnit + (YUnit - TableFont.Height) / 2));
                g.DrawString(TPlateNo, TableFont, DrawBrush, new Point(Ev.PageBounds.Width * 3 / 4, PTop + 2 * YUnit + (YUnit - TableFont.Height) / 2));
                DrawHString(TVendorName, PLeft + 20, PTop + 3 * YUnit);
            }
        }

        void PrintTableFirstPart(PrintPageEventArgs Ev)
        {
            const int colCount = 8;
            int starty = PTop + 4 * YUnit;
            int startx = PLeft;
            int endx = PWidth - PRight;
            int width = endx - startx;
            int height = 32 * YUnit;
            int rows = 33;

            int c1_width = 40;
            int c2_startx = startx + c1_width;
            int c2_width = 40;
            int c2_mid_x = GetMiddleX(c2_startx, c2_width);

            int c3_start = c2_width + c2_startx;
            int c3_width = (width - 2 * c2_width) / 4;
            int stringstarty = starty + (YUnit - TableFont.Height) / 2;

            int[] colsw = new int[colCount];
            colsw[0] = 40;
            colsw[1] = (width / 4) - 40;
            colsw[2] = (int)((width / 4) * 3.0 / 5);
            colsw[3] = (int)((width / 4) * 2.0 / 5);
            colsw[4] = 40;
            colsw[5] = (width / 4) - 40;
            colsw[6] = (int)((width / 4) * 3.0 / 5);
            colsw[7] = (int)((width / 4) * 2.0 / 5);
            Pen PenLittle = new Pen(Brushes.Black, 1);
            //  Pen Penbold = new Pen(Brushes.Black, 1);
            g.DrawRectangle(PenLittle, startx, starty, width, height + YUnit);
            DrawTableRow(startx, starty, width, rows, YUnit);
            Drawtablevertical(startx, starty, width, rows, YUnit, colsw);

            StringFormat sf = new StringFormat();
            sf.Alignment = StringAlignment.Center;
            for (int i = 1; i < rows; i++)
            {
                g.DrawString(i.ToString(), TableFont, DrawBrush, new Point(startx + c1_width / 2, stringstarty + i * YUnit), sf);
            }

            for (int i = 1; i < rows; i++)
            {
                g.DrawString((i + 32).ToString(), TableFont, DrawBrush, new Point(startx + width / 2 + c1_width / 2, stringstarty + i * YUnit), sf);
            }
            int x = startx;
            int stringY = YUnit / 2 + starty;
            int[] unitmids = GetColumMidOffsetXs(colsw);
            for (int Cols = 0; Cols < colCount; Cols++)
            {
                String ColumnText = Titles[Cols];

                Ev.Graphics.DrawString(ColumnText, TableFont, DrawBrush, startx + unitmids[Cols], stringstarty, sf);

                x += unitmids[Cols];

            }

            for (int items = 0; items < rollIndex.Length && items < 64; items++)
            {
                if (items < 32)
                {
                    Ev.Graphics.DrawString(rollIndex[items].ToString(), TableFont, DrawBrush, startx + unitmids[1], stringstarty + YUnit * (items + 1), sf);
                    Ev.Graphics.DrawString(outputWeight[items].ToString(), TableFont, DrawBrush, startx + unitmids[2], stringstarty + YUnit * (items + 1), sf);
                    Ev.Graphics.DrawString(jointNum[items].ToString(), TableFont, DrawBrush, startx + unitmids[3], stringstarty + YUnit * (items + 1), sf);
                }
                else
                {
                    Ev.Graphics.DrawString(rollIndex[items - 32].ToString(), TableFont, DrawBrush, startx + unitmids[5], stringstarty + YUnit * (items - 31), sf);
                    Ev.Graphics.DrawString(outputWeight[items - 32].ToString(), TableFont, DrawBrush, startx + unitmids[6], stringstarty + YUnit * (items - 31), sf);
                    Ev.Graphics.DrawString(jointNum[items - 32].ToString(), TableFont, DrawBrush, startx + unitmids[7], stringstarty + YUnit * (items - 31), sf);
                }
            }

            DrawHString("Total Weight", startx, starty + rows * YUnit);
           // DrawHString("Total Weight", startx, starty + (rows + 1) * YUnit);

            DrawHStringAlignCenter("banzu: bing", startx + width/3, starty + (rows + 1) * YUnit);
            DrawHStringAlignCenter("caozuogong: riban", startx + width*2 / 3, starty + (rows + 1) * YUnit);

        }

    }

}
